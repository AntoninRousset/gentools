#!/usr/bin/env python3

import sys, subprocess, re, os, itertools, random

def syntax():
    print("""
Generate unmask for given args if needed.
One can remove some USE flags and keyword, launch this and it will use emerge to
generate a list of needed keywords and USEs.
    """.strip())

    sys.exit(1)

def save_change(stderr, directory):

    begin_re = re.compile(r' \(see "{}" in the portage\(5\) man page for more details\)'.format(directory))
    path = '/etc/portage/{}/required'.format(directory)

    content = ''
    copying = False
    for l in stderr.split('\n'):

        if copying and l is "":
            copying = False

        if copying:
            content += l + '\n'

        if begin_re.match(l):
            copying = True

    if content is not '':
        with open(path, 'a') as f:
            print(content, file=f)

        print('>>> adding changes to ' + directory)

def save_changes(stderr):

    element_re = re.compile(r' \(see "(package.[^"]+)" in the portage\(5\) man page for more details\)')

    elements = set()
    for l in stderr.split('\n'):

        element_match = element_re.match(l)

        if element_match:
            elements.add(element_match.group(1))

    for e in elements:
        save_change(stderr, e)

def emerge(args):
    cmd = ['emerge', '--pretend']
    cmd += args

    print('>> ' + ' '.join(cmd))
    proc = subprocess.Popen(cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.PIPE,
            universal_newlines=True)

    stdout, stderr = proc.communicate()

    return stderr

def parse_atom(pkg):
    out = subprocess.check_output(['qatom', pkg], universal_newlines=True)
    splitted = out.split()
    return dict(zip(splitted, ['category', 'package', 'version']))

## main begin

if len(sys.argv) is 1 or '-h' in sys.argv or '--help' in sys.argv:
    syntax()

pkg_re = re.compile(r'^[A-Za-z0-9_][A-Za-z0-9+_.-]*/[A-Za-z0-9_][A-Za-z0-9+_-]*:[A-Za-z0-9_][A-Za-z0-9+_.-]*$')
dep_re = re.compile(r'required by [(]([^,]+)')

while True:

    stderr = emerge(sys.argv[1:])

    if stderr is "":
        break

    save_changes(stderr)

    # generate next pkgs to emerge
    pkgs_pool = set()
    for l in stderr.split('\n'):
        pkg_match = pkg_re.match(l)
        dep_match = dep_re.search(l)

        pkg = None

        if pkg_match:
            pkg = pkg_match.group()
        elif dep_match:
            pkg = '=' + dep_match.group(1)

        if pkg:
            atom = parse_atom(pkg)
            pkgs_pool.add(atom)

    cmd = set(map(lambda x: x.to_str(['category', 'package', 'slot']), pkgs_pool))

    stderr = emerge(cmd)
    save_changes(stderr)
