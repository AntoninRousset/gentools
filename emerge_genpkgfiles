#!/usr/bin/env python3

import sys, subprocess, re, os, itertools, random
from typing import Iterable, Mapping, NamedTuple

class Pkg(NamedTuple('Pkg', [
        ('category', str),
        ('package', str),
        ('version', str),
        ('slot', str),
    ])): pass


def save_change(stderr: str, directory: str) -> None:
    begin_re = re.compile(r' \(see "{}" in the portage\(5\) man page for more details\)'.format(directory))
    path = '/etc/portage/{}/required'.format(directory)

    content = ''
    copying = False
    for l in stderr.split('\n'):
        if copying and l is '':
            copying = False

        if copying:
            content += l + '\n'

        if begin_re.match(l) is not None:
            copying = True

    if not content:
        return

    with open(path, 'a') as f:
        print(content, file=f)

    print('>>> adding changes to ' + directory)

element_re = re.compile(r' \(see "(package.[^"]+)" in the portage\(5\) man page for more details\)')
def save_changes(stderr: str) -> None:
    elements = set()
    for l in stderr.split('\n'):

        element_match = element_re.match(l)

        if element_match is not None:
            elements.add(element_match.group(1))

    for e in elements:
        save_change(stderr, e)

def emerge(args: Iterable[str]) -> str:
    cmd = ['emerge', '--pretend']
    cmd += args

    print('>> ' + ' '.join(cmd))
    proc = subprocess.Popen(
        cmd,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.PIPE,
        universal_newlines=True
    )

    stdout, stderr = proc.communicate()

    return stderr

def parse_atom(pkg: str) -> Pkg:
    cmd = ['qatom', '--format', '%{CATEGORY} %{PN} %{PV} %{SLOT}', pkg]
    out = subprocess.check_output(cmd, universal_newlines=True)
    return Pkg(*out.split())


pkg_re = re.compile('^[A-Za-z0-9_][A-Za-z0-9+_.-]*/[A-Za-z0-9_][A-Za-z0-9+_-]*:[A-Za-z0-9_][A-Za-z0-9+_.-]*$')
dep_re = re.compile('required by [(]([^,]+)')

while True:
    stderr = emerge(sys.argv[1:])
    if not stderr:
        break

    save_changes(stderr)

    # generate next pkgs to emerge
    pkgs_pool = set()
    for l in stderr.split('\n'):
        pkg_match = pkg_re.match(l)
        dep_match = dep_re.search(l)

        pkg = None
        if pkg_match is not None:
            pkg = pkg_match.group()
        elif dep_match is not None:
            pkg = '=' + dep_match.group(1)

        if pkg is not None:
            atom = parse_atom(pkg)
            pkgs_pool.add(atom)

    cmd = {'{}/{}{}'.format(x.category, x.package, x.slot) for x in pkgs_pool}
    if not cmd:
        continue

    stderr = emerge(cmd)
    save_changes(stderr)
